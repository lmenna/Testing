{"version":3,"sources":["../../src/utils/timers.js"],"names":["myFunc","arg","console","log","timeoutResolveSuccess","delay","retVal","Promise","resolve","reject","wait","setTimeout","clearTimeout","timeoutRejectError","retError","getSlowValue","val","Math","random","slowAddition","firstValue","secondValue"],"mappings":";;;;;;;;;;;;;AAAA;;;;AAKC,SAASA,MAAT,CAAgBC,GAAhB,EAAqB;AACnBC,EAAAA,OAAO,CAACC,GAAR,sBAA0BF,GAA1B;AACD;;SAGaG,qB;;;;;;;0BAAf,iBAAqCC,KAArC,EAA4CC,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,6CAES,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,IAAI,GAAGC,UAAU,CAAC,YAAM;AAC1BC,gBAAAA,YAAY,CAACF,IAAD,CAAZ;AACAF,gBAAAA,OAAO,CAACF,MAAD,CAAP;AACD,eAHoB,EAGlBD,KAHkB,CAArB;AAID,aALM,CAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAUeQ,kB;;;;;;;0BAAf,kBAAkCR,KAAlC,EAAyCS,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA,8CAES,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,IAAI,GAAGC,UAAU,CAAC,YAAM;AAC1BC,gBAAAA,YAAY,CAACF,IAAD,CAAZ;AACAD,gBAAAA,MAAM,CAACK,QAAD,CAAN;AACD,eAHoB,EAGlBT,KAHkB,CAArB;AAID,aALM,CAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAUeU,Y;;;;;;;0BAAf,kBAA4BC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,8CACSZ,qBAAqB,CAAC,OAAKa,IAAI,CAACC,MAAL,EAAL,GAAqB,GAAtB,EAA2BF,GAA3B,CAD9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAIeG,Y;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA,8CAES,IAAIZ,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACMM,YAAY,CAAC,CAAD,CADlB;;AAAA;AACbK,wBAAAA,UADa;AAEjBlB,wBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BiB,UAA3B;AAFiB;AAAA,+BAGOL,YAAY,CAAC,CAAD,CAHnB;;AAAA;AAGbM,wBAAAA,WAHa;AAIjBnB,wBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BkB,WAA5B;AACAb,wBAAAA,OAAO,CAACY,UAAU,GAAGC,WAAd,CAAP;;AALiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;;AAAA;AAAA;AAAA;AAAA,gBAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* timers.js\n * desc: async, await and Promise examples using timers to simulate long running processes.\n *\n */\n\n function myFunc(arg) {\n   console.log(`arg was => ${arg}`);\n }\n\n\nasync function timeoutResolveSuccess(delay, retVal) {\n\n  return(new Promise((resolve, reject) => {\n    let wait = setTimeout(() => {\n      clearTimeout(wait);\n      resolve(retVal);\n    }, delay)\n  }));\n}\n\nasync function timeoutRejectError(delay, retError) {\n\n  return(new Promise((resolve, reject) => {\n    let wait = setTimeout(() => {\n      clearTimeout(wait);\n      reject(retError);\n    }, delay)\n  }));\n}\n\nasync function getSlowValue(val) {\n  return(timeoutResolveSuccess(1000*Math.random() + 500, val));\n}\n\nasync function slowAddition() {\n\n  return(new Promise(async (resolve, reject) => {\n    var firstValue = await getSlowValue(2);\n    console.log(\"firstValue:\", firstValue)\n    var secondValue = await getSlowValue(3);\n    console.log(\"secondValue:\", secondValue)\n    resolve(firstValue + secondValue);\n  }));\n}\n\n\nexport { timeoutResolveSuccess, timeoutRejectError, slowAddition };\n"],"file":"timers.js"}