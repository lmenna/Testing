{"version":3,"sources":["../../src/utils/dbUtils.js"],"names":["getMostRecentETHData","url","Promise","resolve","reject","undefined","console","log","Error","MongoClient","connect","useNewUrlParser","client","db","collection","find","toArray","results","close","writeResultsToMongo","dataToWrite","targetDB","targetCollection","process","env","URLCrypto","insertOne","removeCollectionFromMongo","remove"],"mappings":";;;;;;;;;AAKA;;;;;;AAEA;;;;SAIgBA,oB;;;AAuBhB;;;;;;;;;;0BAvBC,kBAAoCC,GAApC;AAAA;AAAA;AAAA;AAAA;AAAA,8CAES,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAY,iBAAgBC,OAAhB,EAAyBC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BACbH,GAAG,KAAGI,SAAN,IAAmBJ,GAAG,KAAG,EADZ;AAAA;AAAA;AAAA;;AAEfK,wBAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACAD,wBAAAA,OAAO,CAACC,GAAR,CAAY,0DAAZ;AACAH,wBAAAA,MAAM,CAAC,IAAII,KAAJ,CAAU,yCAAV,CAAD,CAAN;AAJe;AAAA;;AAAA;AAAA;AAAA;AAAA,+BAUEC,qBAAYC,OAAZ,CAAoBT,GAApB,EAAyB;AAAEU,0BAAAA,eAAe,EAAE;AAAnB,yBAAzB,CAVF;;AAAA;AAUbC,wBAAAA,MAVa;AAWbC,wBAAAA,EAAE,GAAGD,MAAM,CAACC,EAAP,CAAU,UAAV,CAAL;AAXa;AAAA,+BAYOA,EAAE,CAACC,UAAH,CAAc,kBAAd,EAAkCC,IAAlC,CAAuC,EAAvC,EAA2CC,OAA3C,EAZP;;AAAA;AAYTC,wBAAAA,OAZS;AAabd,wBAAAA,OAAO,CAACc,OAAD,CAAP;;AAba;AAAA;AAebL,wBAAAA,MAAM,CAACM,KAAP;AAfa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;;AAAA;AAAA;AAAA;AAAA,gBAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA4BcC,mB;;;AA0Bf;;;;;;;;;;0BA1BA,kBAAmCC,WAAnC,EAAgDC,QAAhD,EAA0DC,gBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAEMrB,YAAAA,GAFN,GAEYsB,OAAO,CAACC,GAAR,CAAYC,SAFxB;;AAAA,kBAGMxB,GAAG,IAAEI,SAAL,IAAkBJ,GAAG,KAAG,EAH9B;AAAA;AAAA;AAAA;;AAIIK,YAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAY,0DAAZ;AALJ;AAAA;;AAAA;AAAA;AAWMD,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAXN;AAAA,mBAYqBE,qBAAYC,OAAZ,CAAoBT,GAApB,EAAyB;AAAEU,cAAAA,eAAe,EAAE;AAAnB,aAAzB,CAZrB;;AAAA;AAYMC,YAAAA,MAZN;AAaMC,YAAAA,EAAE,GAAGD,MAAM,CAACC,EAAP,CAAUQ,QAAV,CAAL;AACAf,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCe,gBAAlC;AAdN;AAAA,mBAeYT,EAAE,CAACC,UAAH,CAAcQ,gBAAd,EAAgCI,SAAhC,CAA0CN,WAA1C,CAfZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBMd,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;;AAlBN;AAAA;AAqBQK,YAAAA,MAAM,CAACM,KAAP;AArBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA+BeS,yB;;;;;;;0BAAf,kBAAyCN,QAAzC,EAAmDC,gBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAEMrB,YAAAA,GAFN,GAEYsB,OAAO,CAACC,GAAR,CAAYC,SAFxB;;AAAA,kBAGMxB,GAAG,IAAEI,SAAL,IAAkBJ,GAAG,KAAG,EAH9B;AAAA;AAAA;AAAA;;AAIIK,YAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAY,0DAAZ;AALJ;AAAA;;AAAA;AAAA;AAWMD,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAXN;AAAA,mBAYqBE,qBAAYC,OAAZ,CAAoBT,GAApB,EAAyB;AAAEU,cAAAA,eAAe,EAAE;AAAnB,aAAzB,CAZrB;;AAAA;AAYMC,YAAAA,MAZN;AAaMC,YAAAA,EAAE,GAAGD,MAAM,CAACC,EAAP,CAAUQ,QAAV,CAAL;AACAf,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCe,gBAAtC;AAdN;AAAA,mBAeYT,EAAE,CAACC,UAAH,CAAcQ,gBAAd,EAAgCM,MAAhC,EAfZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBMtB,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;;AAlBN;AAAA;AAqBQK,YAAAA,MAAM,CAACM,KAAP;AArBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* dbUtils.js\n * desc: Utilities for interacting with MongoDB transactional data store\n *       hosted on mlab.com.\n */\n\nimport { MongoClient } from 'mongodb';\n\n/* getMostRecentETHData()\n * desc: Reads ETH data from MongoDB\n * return: json block of data for ETH daily transaction activity\n */\n async function getMostRecentETHData(url) {\n\n   return new Promise(async function (resolve, reject) {\n     if (url===undefined || url===\"\") {\n       console.log(\"MongoDB url not set in the environment.\");\n       console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n       reject(new Error(\"MongoDB url not set in the environment.\"));\n     }\n     else {\n       var client;\n       var db;\n       try {\n         client = await MongoClient.connect(url, { useNewUrlParser: true });\n         db = client.db(\"ethereum\");\n         var results = await db.collection(\"eth_transactions\").find({}).toArray();\n         resolve(results);\n       } finally {\n         client.close();\n       }\n     }\n   });\n }\n\n/* writeResultsToMongo()\n * desc: Writes results from the google BigQuery into MongoDB on the cloud\n * param: dataToWrite - the json block to write to MongoDB.\n *\n */\nasync function writeResultsToMongo(dataToWrite, targetDB, targetCollection) {\n\n  var url = process.env.URLCrypto;\n  if (url==undefined || url===\"\") {\n    console.log(\"MongoDB url not set in the environment.\");\n    console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n  }\n  else {\n    var client;\n    var db;\n    try {\n      console.log(\"Connect to MongoDB\");\n      client = await MongoClient.connect(url, { useNewUrlParser: true });\n      db = client.db(targetDB);\n      console.log(\"Writing results to\", targetCollection);\n      await db.collection(targetCollection).insertOne(dataToWrite);\n    }\n    catch(err) {\n      console.log(\"Error writing to DB:\", err);\n    }\n    finally {\n        client.close();\n    }\n  }\n}\n\n/* writeResultsToMongo()\n * desc: Writes results from the google BigQuery into MongoDB on the cloud\n * param: dataToWrite - the json block to write to MongoDB.\n *\n */\nasync function removeCollectionFromMongo(targetDB, targetCollection) {\n\n  var url = process.env.URLCrypto;\n  if (url==undefined || url===\"\") {\n    console.log(\"MongoDB url not set in the environment.\");\n    console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n  }\n  else {\n    var client;\n    var db;\n    try {\n      console.log(\"Connect to MongoDB\");\n      client = await MongoClient.connect(url, { useNewUrlParser: true });\n      db = client.db(targetDB);\n      console.log(\"Deleting prior data in\", targetCollection);\n      await db.collection(targetCollection).remove();\n    }\n    catch(err) {\n      console.log(\"Error writing to DB:\", err);\n    }\n    finally {\n        client.close();\n    }\n  }\n}\n\n\nexport {writeResultsToMongo, getMostRecentETHData, removeCollectionFromMongo};\n"],"file":"dbUtils.js"}