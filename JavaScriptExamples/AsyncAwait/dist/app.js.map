{"version":3,"sources":["../src/app.js"],"names":["require","poloniexURL","coinbaseURL","bittrexURLAll","hitbtcURL","yobitBaseURL","runAsyncTest01","console","log","url","process","env","URLEth","undefined","Error","result","runAsyncTest02","retPromise","retValue","runTimerAsync01","runTimerAsync02","runSlowMath","runMarketDataTest","startAwait","Date","now","polo","poloTime","cb","cbTime","bt","btTime","hb","hbTime","endAwait","startAwaitAll","polo2","cb2","bt2","hb2","Promise","all","endAwaitAll","setInterval"],"mappings":"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","sourcesContent":["require(\"@babel/polyfill\");\nimport {getMostRecentETHData} from \"./utils/dbUtils\";\nimport {timeoutResolveSuccess, timeoutRejectError, slowAddition} from \"./utils/timers\";\nimport {getExchangeData} from \"./utils/getCryptoData\";\n\nconst poloniexURL = \"https://poloniex.com/public?command=returnTicker\"; \nconst coinbaseURL = \"https://api.pro.coinbase.com/products\"; \nconst bittrexURLAll = \"https://bittrex.com/api/v1.1/public/getmarketsummaries\";\nconst hitbtcURL = \"https://api.hitbtc.com/api/2/public/ticker\";\nconst yobitBaseURL = \"https://yobit.net/api/3/ticker/\"\n\n\nvar runAsyncTest01 = async () => {\n\n  // Case 1: Set DB url to a valid value. Data should be returned without error.\n  console.log(\"\\n--->> Case 1: Set DB url to a valid value. Data should be returned without error.\");\n  console.log(\"--->> This is the case where data should be returned normally.\");\n  var url = process.env.URLEth;\n  if (url===undefined || url===\"\") {\n    console.log(\"Couldn't find the MongoDB url.  Try sourcing SetMongoEnv.sh prior to running.\")\n    return(new Error(\"MongoDB environment not found.\"));\n  }\n  try {\n    var result = await getMostRecentETHData(url);\n    console.log(\"Result:\", result);\n  }\n  catch(err) {\n    console.log(\"err:\", err);\n    return(new Error(\"Error in runAsyncTest01\"));\n  }\n  console.log(\"End: Case 1.\");\n}\n\nvar runAsyncTest02 = async () => {\n\n  // Case 2: Try to get data with DB URL not set.\n  console.log(\"\\n--->> Case 2: Try to get data with DB URL not set.\");\n  console.log(\"--->> This case should fail with the promise rejected and exception caught.\");\n  var url = \"\";\n  try {\n    var retPromise = getMostRecentETHData(url);\n    console.log(\"retPromise:\", retPromise);\n    var retValue = await retPromise;\n    // var retValue = await getMostRecentETHData();\n    console.log(\"retValue:\", retValue);\n  }\n  catch(err) {\n    console.log(\"err:\", err);\n    return(new Error(\"Error in runAsyncTest02\"));\n  }\n  console.log(\"End: Case 2.\");\n}\n\n/* runTimerAsync01\n * desc: Uses setTimeout to produce a delay to test async await code.  Returns success.\n */\nvar runTimerAsync01 = async () => {\n\n  var result = await timeoutResolveSuccess(1500, \"Result01\");\n  console.log(\"result:\", result);\n}\n\n/* runTimerAsync02\n * desc: Test a async failure.  Uses setTimeout to produce a delay to test async await code.  Returns failure.\n */\nvar runTimerAsync02 = async () => {\n\n  try {\n    var result = await timeoutRejectError(1000, \"Result02\");\n    console.log(\"result:\", result);\n  }\n  catch(err) {\n    console.log(\"Error in runTimerAsync02:\", err)\n  }\n}\n\n/* runDoSlowMath\n * desc: Performs arithmetic (a + b) where 'a' and 'b' take a long time to compute.\n  *      Uses setTimeout to simulate long running requests.\n */\nvar runSlowMath = async () => {\n  try {\n    var result = await slowAddition();\n    console.log(\"slowAddition result:\", result);\n  }\n  catch(err) {\n    console.log(\"Error in runSlowMath:\", err)\n  }\n}\n\n/* runMarketDataTest()\n * desc: Queries various exchanges for market data.  First it does this sequentially using\n *       await on each request.  Next it does this in parallel awaiting on all request simultaneously\n */\nvar runMarketDataTest = async() => {\n\n  console.log(\"Begin: runMarketDataTest\");\n  const startAwait = Date.now();\n\n  try {\n    let polo = await getExchangeData(poloniexURL);\n    let poloTime = Date.now();\n    let cb = await getExchangeData(coinbaseURL);\n    let cbTime = Date.now();\n    let bt = await getExchangeData(bittrexURLAll);\n    let btTime = Date.now();\n    let hb = await getExchangeData(hitbtcURL);\n    let hbTime = Date.now();\n    console.log(`Polo: ${poloTime-startAwait}  CB: ${cbTime-poloTime}  BT: ${btTime-cbTime}  HB: ${hbTime-btTime}`);\n    console.log(`Time for awaiting each exchange seperately: ${hbTime - startAwait}`);\n  }\n  catch(err) {\n    console.log(`Error getting data sequentially: ${err}`);\n  }\n  const endAwait = Date.now();\n\n  const startAwaitAll = Date.now();\n  console.log(\"Get all exchange data simultaneously.\");\n  try {\n    let polo2 = getExchangeData(poloniexURL);\n    let cb2 = getExchangeData(coinbaseURL);\n    let bt2 = getExchangeData(bittrexURLAll);\n    let hb2 = getExchangeData(hitbtcURL);\n    await Promise.all([polo2, cb2, bt2, hb2]);\n  }\n  catch(err) {\n    console.log(`Error getting data simultaneously: ${err}`);\n  }\n  const endAwaitAll = Date.now();\n  console.log(`Time for awaiting all exchanges together: ${endAwaitAll - startAwaitAll}`);  \n  console.log(\"End: runMarketDataTest\");\n}\n\n//runAsyncTest01();\n//runAsyncTest02();\n// runTimerAsync01();\n// runTimerAsync02();\n// runSlowMath();\nsetInterval(runMarketDataTest, 10000);\n"],"file":"app.js"}