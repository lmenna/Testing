{"version":3,"sources":["../src/app.js"],"names":["require","runAsyncTest01","console","log","url","process","env","URLEth","undefined","Error","result","runAsyncTest02","retPromise","retValue","runTimerAsync01","runTimerAsync02","runSlowMath"],"mappings":"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","sourcesContent":["require(\"@babel/polyfill\");\nimport {getMostRecentETHData} from \"./utils/dbUtils\";\nimport {timeoutResolveSuccess, timeoutRejectError, slowAddition} from \"./utils/timers\";\n\nvar runAsyncTest01 = async () => {\n\n  // Case 1: Set DB url to a valid value. Data should be returned without error.\n  console.log(\"\\n--->> Case 1: Set DB url to a valid value. Data should be returned without error.\");\n  console.log(\"--->> This is the case where data should be returned normally.\");\n  var url = process.env.URLEth;\n  if (url===undefined || url===\"\") {\n    console.log(\"Couldn't find the MongoDB url.  Try sourcing SetMongoEnv.sh prior to running.\")\n    return(new Error(\"MongoDB environment not found.\"));\n  }\n  try {\n    var result = await getMostRecentETHData(url);\n    console.log(\"Result:\", result);\n  }\n  catch(err) {\n    console.log(\"err:\", err);\n    return(new Error(\"Error in runAsyncTest01\"));\n  }\n  console.log(\"End: Case 1.\");\n}\n\nvar runAsyncTest02 = async () => {\n\n  // Case 2: Try to get data with DB URL not set.\n  console.log(\"\\n--->> Case 2: Try to get data with DB URL not set.\");\n  console.log(\"--->> This case should fail with the promise rejected and exception caught.\");\n  var url = \"\";\n  try {\n    var retPromise = getMostRecentETHData(url);\n    console.log(\"retPromise:\", retPromise);\n    var retValue = await retPromise;\n    // var retValue = await getMostRecentETHData();\n    console.log(\"retValue:\", retValue);\n  }\n  catch(err) {\n    console.log(\"err:\", err);\n    return(new Error(\"Error in runAsyncTest02\"));\n  }\n  console.log(\"End: Case 2.\");\n}\n\n/* runTimerAsync01\n * desc: Uses setTimeout to produce a delay to test async await code.  Returns success.\n */\nvar runTimerAsync01 = async () => {\n\n  var result = await timeoutResolveSuccess(1500, \"Result01\");\n  console.log(\"result:\", result);\n}\n\n/* runTimerAsync02\n * desc: Uses setTimeout to produce a delay to test async await code.  Returns failure.\n */\nvar runTimerAsync02 = async () => {\n\n  try {\n    var result = await timeoutRejectError(1000, \"Result02\");\n    console.log(\"result:\", result);\n  }\n  catch(err) {\n    console.log(\"Error in runTimerAsync02:\", err)\n  }\n}\n\n/* runDoSlowMath\n * desc: Performs arithmetic (a + b) where 'a' and 'b' take a long time to compute.\n  *      Uses setTimeout to simulate long running requests.\n */\nvar runSlowMath = async () => {\n  try {\n    var result = await slowAddition();\n    console.log(\"slowAddition result:\", result);\n  }\n  catch(err) {\n    console.log(\"Error in runSlowMath:\", err)\n  }\n}\n\n//runAsyncTest01();\n//runAsyncTest02();\nrunTimerAsync01();\nrunTimerAsync02();\nrunSlowMath();\n"],"file":"app.js"}