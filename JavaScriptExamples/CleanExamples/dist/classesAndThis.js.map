{"version":3,"sources":["../src/classesAndThis.js"],"names":["whatIsThis","aParam","console","log","obj","firstName","id","displayThis","leaveOutNew","Person","name","age","p","p2","Animal_V1","energy","animal","eat","amount","sleep","length","play","testObjectCreate","parent","heritage","child","Object","create","animalMethods","Animal_V2","Animal_V3","prototype","AnimalWithNew","AnimalAsClass"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/* whatIsThis\n * desc: See what the value of this is in a function\n */\nfunction whatIsThis(aParam) {\n\n  console.log(\"this at the function level START:\", this);\n  let obj = {\n    firstName: \"Luigi\",\n    id: 10,\n    displayThis: function() {\n      console.log(\"this inside the obj:\", this);\n      console.log(\"this.firstName inside the obj:\", this.firstName);\n    }\n  }\n  obj.displayThis();\n  console.log(\"this at the function level END:\", this);\n}\n\n/* leaveOutNew\n * desc: Classes are just functions in JavaScript.  Try to call the function directly without\n *       using new.\n */\n function leaveOutNew() {\n\n    class Person {\n      constructor(name, age) {\n        this.name = name;\n        this.age = age;\n      }\n      sayHello() {\n        return(\"Hello \" + this.name);\n      }\n    }\n\n    var p = new Person(\"Luigi\", 11);\n    console.log(\"p:\", p);\n\n    var p2 = Person(\"Luigi2\", 22);\n }\n\n\n/* Animal_V1\n * desc: Case where we create an Animal object using a function containing variables and functions.\n *       In this case every Animal instance will contain copies of the functions eat, sleep and play.\n *       This is wasteful since the functions can be shared.\n */\nfunction Animal_V1(name, energy) {\n\n  let animal = {};\n  // Member variables\n  animal.name = name;\n  animal.energy = energy;\n\n  // Member functions\n  animal.eat = function(amount) {\n    console.log(`${this.name} is eating.`);\n    this.energy += amount;\n  }\n\n  animal.sleep = function(length) {\n    console.log(`${this.name} is sleeping.`);\n    this.energy += length;\n  }\n\n  animal.play = function(length) {\n    console.log(`${this.name} is playing.`);\n    this.energy -= length;\n  }\n\n  return(animal);\n}\n\n\n/* testObjectCreate\n * desc: Illistate how Object.create() automatically fill in missing items.  It is like\n *       they are inherited from the base object.\n */\nfunction testObjectCreate() {\n\n  let parent = {\n    name: \"Luigi\",\n    age: 35,\n    heritage: \"Italian\"\n  };\n\n  console.log(\"Use Object.create() and see how properties are passed to the child.\")\n  let child = Object.create(parent);\n  child.name = \"Junior\";\n  child.age = 12;\n  console.log(\"parent:\", parent);\n  console.log(\"parent.name\", parent.name);\n  console.log(\"parent.age\", parent.age);\n  console.log(\"parent.heritage:\", parent.heritage);\n  console.log(\"child:\", child, \"  <--- Note: heritage is NOT here.\");\n  console.log(\"child.name\", child.name);\n  console.log(\"child.age\", child.age);\n  console.log(\"child.heritage:\", child.heritage, \"  <--- But heritage is here.\");\n}\n\n\n// Create one instance of the animal methods to share across all instances\nconst animalMethods = {\n  eat(amount) {\n    console.log(`${this.name} is eating.`);\n    this.energy += amount;\n  },\n  sleep(length) {\n    console.log(`${this.name} is sleeping.`);\n    this.energy += length;\n  },\n  play(length) {\n    console.log(`${this.name} is playing.`);\n    this.energy -= length;\n  }\n}\n\n/* Animal_V2\n * desc: Case where we create an Animal object using a function but in this case the methods\n *       have been seperated into a seperate variable named animalMethods.\n */\nfunction Animal_V2(name, energy) {\n\n  // Member function picked up from animalMethods\n  let animal = Object.create(animalMethods);\n  // Member variables.\n  animal.name = name;\n  animal.energy = energy;\n  return(animal);\n}\n\n/* Animal_V3\n * desc: Case where we create an Animal object using the function prototype object to\n *       store the animalMethods.\n *       The function's prototype is an object that every function has\n */\nfunction Animal_V3(name, energy) {\n\n  // Use function's prototype as backstop for missing methods\n  let animal = Object.create(Animal_V3.prototype);\n\n  // Member variables\n  animal.name = name;\n  animal.energy = energy;\n\n  // Member functions\n  Animal_V3.prototype.eat = function(amount) {\n    console.log(`${this.name} is eating.`);\n    this.energy += amount;\n  }\n  Animal_V3.prototype.sleep = function(length) {\n    console.log(`${this.name} is sleeping.`);\n    this.energy += length;\n  }\n  Animal_V3.prototype.play = function(length) {\n    console.log(`${this.name} is playing.`);\n    this.energy -= length;\n  }\n\n  return(animal);\n}\n\n/* AnimalWithNew\n * desc: Case where we want the Animal function to be called using the \"new\" keyword.\n *       The function's prototype is an object that every function has\n */\nfunction AnimalWithNew(name, energy) {\n\n  // When calling the function with new the Object.create() is handled for us\n  // with the \"this\" constaining the created object backed by the prototype.\n  // Use function's prototype as backstop for missing methods\n  // let animal = Object.create(Animal_V3.prototype);\n\n  // When created with new the \"this\" keyword contains the object\n  // Member variables\n  // animal.name = name;\n  // animal.energy = energy;\n  this.name = name;\n  this.energy = energy;\n\n  // When created using new the function implicitly returns the object for you.\n  // so we can comment this out.\n  // return(animal);\n}\n\n// Member functions for AnimalWithNew\nAnimalWithNew.prototype.eat = function(amount) {\n  console.log(`${this.name} is eating.`);\n  this.energy += amount;\n}\n AnimalWithNew.prototype.sleep = function(length) {\n  console.log(`${this.name} is sleeping.`);\n  this.energy += length;\n}\nAnimalWithNew.prototype.play = function(length) {\n  console.log(`${this.name} is playing.`);\n  this.energy -= length;\n}\n\n/* AnimalAsClass\n * desc: This is the modern way to create a class in JavaScript.  The previous examples are valuable\n *       since they show how the class actually works.\n */\nclass AnimalAsClass {\n\n  constructor(name, energy) {\n    this.name = name;\n    this.energy = energy;\n  }\n  // Member functions for AnimalWithNew\n  eat(amount) {\n    console.log(`${this.name} is eating.`);\n    this.energy += amount;\n  }\n  sleep(length) {\n    console.log(`${this.name} is sleeping.`);\n    this.energy += length;\n  }\n  play(length) {\n    console.log(`${this.name} is playing.`);\n    this.energy -= length;\n  }\n}\n\nexport { whatIsThis, testObjectCreate, Animal_V1, Animal_V2, Animal_V3, AnimalWithNew, AnimalAsClass,\n  leaveOutNew }\n"],"file":"classesAndThis.js"}