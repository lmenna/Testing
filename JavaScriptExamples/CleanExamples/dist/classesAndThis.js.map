{"version":3,"sources":["../src/classesAndThis.js"],"names":["Animal_V1","name","energy","animal","eat","amount","console","log","sleep","length","play","testObjectCreate","parent","age","heritage","child","Object","create","animalMethods","Animal_V2","Animal_V3","prototype","AnimalWithNew","AnimalAsClass"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;AAKA,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,MAAzB,EAAiC;AAE/B,MAAIC,MAAM,GAAG,EAAb,CAF+B,CAG/B;;AACAA,EAAAA,MAAM,CAACF,IAAP,GAAcA,IAAd;AACAE,EAAAA,MAAM,CAACD,MAAP,GAAgBA,MAAhB,CAL+B,CAO/B;;AACAC,EAAAA,MAAM,CAACC,GAAP,GAAa,UAASC,MAAT,EAAiB;AAC5BC,IAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,SAAKC,MAAL,IAAeG,MAAf;AACD,GAHD;;AAKAF,EAAAA,MAAM,CAACK,KAAP,GAAe,UAASC,MAAT,EAAiB;AAC9BH,IAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,SAAKC,MAAL,IAAeO,MAAf;AACD,GAHD;;AAKAN,EAAAA,MAAM,CAACO,IAAP,GAAc,UAASD,MAAT,EAAiB;AAC7BH,IAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,SAAKC,MAAL,IAAeO,MAAf;AACD,GAHD;;AAKA,SAAON,MAAP;AACD;AAGD;;;;;;AAIA,SAASQ,gBAAT,GAA4B;AAE1B,MAAIC,MAAM,GAAG;AACXX,IAAAA,IAAI,EAAE,OADK;AAEXY,IAAAA,GAAG,EAAE,EAFM;AAGXC,IAAAA,QAAQ,EAAE;AAHC,GAAb;AAMAR,EAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ;AACA,MAAIQ,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAcL,MAAd,CAAZ;AACAG,EAAAA,KAAK,CAACd,IAAN,GAAa,QAAb;AACAc,EAAAA,KAAK,CAACF,GAAN,GAAY,EAAZ;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBK,MAAvB;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BK,MAAM,CAACX,IAAlC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BK,MAAM,CAACC,GAAjC;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCK,MAAM,CAACE,QAAvC;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBQ,KAAtB,EAA6B,oCAA7B;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BQ,KAAK,CAACd,IAAhC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBQ,KAAK,CAACF,GAA/B;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BQ,KAAK,CAACD,QAArC,EAA+C,8BAA/C;AACD,C,CAGD;;;AACA,IAAMI,aAAa,GAAG;AACpBd,EAAAA,GADoB,eAChBC,MADgB,EACR;AACVC,IAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,SAAKC,MAAL,IAAeG,MAAf;AACD,GAJmB;AAKpBG,EAAAA,KALoB,iBAKdC,MALc,EAKN;AACZH,IAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,SAAKC,MAAL,IAAeO,MAAf;AACD,GARmB;AASpBC,EAAAA,IAToB,gBASfD,MATe,EASP;AACXH,IAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,SAAKC,MAAL,IAAeO,MAAf;AACD;AAZmB,CAAtB;AAeA;;;;;AAIA,SAASU,SAAT,CAAmBlB,IAAnB,EAAyBC,MAAzB,EAAiC;AAE/B;AACA,MAAIC,MAAM,GAAGa,MAAM,CAACC,MAAP,CAAcC,aAAd,CAAb,CAH+B,CAI/B;;AACAf,EAAAA,MAAM,CAACF,IAAP,GAAcA,IAAd;AACAE,EAAAA,MAAM,CAACD,MAAP,GAAgBA,MAAhB;AACA,SAAOC,MAAP;AACD;AAED;;;;;;;AAKA,SAASiB,SAAT,CAAmBnB,IAAnB,EAAyBC,MAAzB,EAAiC;AAE/B;AACA,MAAIC,MAAM,GAAGa,MAAM,CAACC,MAAP,CAAcG,SAAS,CAACC,SAAxB,CAAb,CAH+B,CAK/B;;AACAlB,EAAAA,MAAM,CAACF,IAAP,GAAcA,IAAd;AACAE,EAAAA,MAAM,CAACD,MAAP,GAAgBA,MAAhB,CAP+B,CAS/B;;AACAkB,EAAAA,SAAS,CAACC,SAAV,CAAoBjB,GAApB,GAA0B,UAASC,MAAT,EAAiB;AACzCC,IAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,SAAKC,MAAL,IAAeG,MAAf;AACD,GAHD;;AAIAe,EAAAA,SAAS,CAACC,SAAV,CAAoBb,KAApB,GAA4B,UAASC,MAAT,EAAiB;AAC3CH,IAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,SAAKC,MAAL,IAAeO,MAAf;AACD,GAHD;;AAIAW,EAAAA,SAAS,CAACC,SAAV,CAAoBX,IAApB,GAA2B,UAASD,MAAT,EAAiB;AAC1CH,IAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,SAAKC,MAAL,IAAeO,MAAf;AACD,GAHD;;AAKA,SAAON,MAAP;AACD;AAED;;;;;;AAIA,SAASmB,aAAT,CAAuBrB,IAAvB,EAA6BC,MAA7B,EAAqC;AAEnC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,OAAKD,IAAL,GAAYA,IAAZ;AACA,OAAKC,MAAL,GAAcA,MAAd,CAZmC,CAcnC;AACA;AACA;AACD,C,CAED;;;AACAoB,aAAa,CAACD,SAAd,CAAwBjB,GAAxB,GAA8B,UAASC,MAAT,EAAiB;AAC7CC,EAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,OAAKC,MAAL,IAAeG,MAAf;AACD,CAHD;;AAICiB,aAAa,CAACD,SAAd,CAAwBb,KAAxB,GAAgC,UAASC,MAAT,EAAiB;AAChDH,EAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,OAAKC,MAAL,IAAeO,MAAf;AACD,CAHA;;AAIDa,aAAa,CAACD,SAAd,CAAwBX,IAAxB,GAA+B,UAASD,MAAT,EAAiB;AAC9CH,EAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,OAAKC,MAAL,IAAeO,MAAf;AACD,CAHD;;IAKMc,a;;;AAEJ,yBAAYtB,IAAZ,EAAkBC,MAAlB,EAA0B;AAAA;;AACxB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD,G,CACD;;;;;wBACIG,M,EAAQ;AACVC,MAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,WAAKC,MAAL,IAAeG,MAAf;AACD;;;0BACKI,M,EAAQ;AACZH,MAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,WAAKC,MAAL,IAAeO,MAAf;AACD;;;yBACIA,M,EAAQ;AACXH,MAAAA,OAAO,CAACC,GAAR,WAAe,KAAKN,IAApB;AACA,WAAKC,MAAL,IAAeO,MAAf;AACD","sourcesContent":["\"use strict\";\n\n/* Animal_V1\n * desc: Case where we create an Animal object using a function containing variables and functions.\n *       In this case every Animal instance will contain copies of the functions eat, sleep and play.\n *       This is wasteful since the functions can be shared.\n */\nfunction Animal_V1(name, energy) {\n\n  let animal = {};\n  // Member variables\n  animal.name = name;\n  animal.energy = energy;\n\n  // Member functions\n  animal.eat = function(amount) {\n    console.log(`${this.name} is eating.`);\n    this.energy += amount;\n  }\n\n  animal.sleep = function(length) {\n    console.log(`${this.name} is sleeping.`);\n    this.energy += length;\n  }\n\n  animal.play = function(length) {\n    console.log(`${this.name} is playing.`);\n    this.energy -= length;\n  }\n\n  return(animal);\n}\n\n\n/* testObjectCreate\n * desc: Illistate how Object.create() automatically fill in missing items.  It is like\n *       they are inherited from the base object.\n */\nfunction testObjectCreate() {\n\n  let parent = {\n    name: \"Luigi\",\n    age: 35,\n    heritage: \"Italian\"\n  };\n\n  console.log(\"Use Object.create() and see how properties are passed to the child.\")\n  let child = Object.create(parent);\n  child.name = \"Junior\";\n  child.age = 12;\n  console.log(\"parent:\", parent);\n  console.log(\"parent.name\", parent.name);\n  console.log(\"parent.age\", parent.age);\n  console.log(\"parent.heritage:\", parent.heritage);\n  console.log(\"child:\", child, \"  <--- Note: heritage is NOT here.\");\n  console.log(\"child.name\", child.name);\n  console.log(\"child.age\", child.age);\n  console.log(\"child.heritage:\", child.heritage, \"  <--- But heritage is here.\");\n}\n\n\n// Create one instance of the animal methods to share across all instances\nconst animalMethods = {\n  eat(amount) {\n    console.log(`${this.name} is eating.`);\n    this.energy += amount;\n  },\n  sleep(length) {\n    console.log(`${this.name} is sleeping.`);\n    this.energy += length;\n  },\n  play(length) {\n    console.log(`${this.name} is playing.`);\n    this.energy -= length;\n  }\n}\n\n/* Animal_V2\n * desc: Case where we create an Animal object using a function but in this case the methods\n *       have been seperated into a seperate variable named animalMethods.\n */\nfunction Animal_V2(name, energy) {\n\n  // Member function picked up from animalMethods\n  let animal = Object.create(animalMethods);\n  // Member variables.\n  animal.name = name;\n  animal.energy = energy;\n  return(animal);\n}\n\n/* Animal_V3\n * desc: Case where we create an Animal object using the function prototype object to\n *       store the animalMethods.\n *       The function's prototype is an object that every function has\n */\nfunction Animal_V3(name, energy) {\n\n  // Use function's prototype as backstop for missing methods\n  let animal = Object.create(Animal_V3.prototype);\n\n  // Member variables\n  animal.name = name;\n  animal.energy = energy;\n\n  // Member functions\n  Animal_V3.prototype.eat = function(amount) {\n    console.log(`${this.name} is eating.`);\n    this.energy += amount;\n  }\n  Animal_V3.prototype.sleep = function(length) {\n    console.log(`${this.name} is sleeping.`);\n    this.energy += length;\n  }\n  Animal_V3.prototype.play = function(length) {\n    console.log(`${this.name} is playing.`);\n    this.energy -= length;\n  }\n\n  return(animal);\n}\n\n/* AnimalWithNew\n * desc: Case where we want the Animal function to be called using the \"new\" keyword.\n *       The function's prototype is an object that every function has\n */\nfunction AnimalWithNew(name, energy) {\n\n  // When calling the function with new the Object.create() is handled for us\n  // with the \"this\" constaining the created object backed by the prototype.\n  // Use function's prototype as backstop for missing methods\n  // let animal = Object.create(Animal_V3.prototype);\n\n  // When created with new the \"this\" keyword contains the object\n  // Member variables\n  // animal.name = name;\n  // animal.energy = energy;\n  this.name = name;\n  this.energy = energy;\n\n  // When created using new the function implicitly returns the object for you.\n  // so we can comment this out.\n  // return(animal);\n}\n\n// Member functions for AnimalWithNew\nAnimalWithNew.prototype.eat = function(amount) {\n  console.log(`${this.name} is eating.`);\n  this.energy += amount;\n}\n AnimalWithNew.prototype.sleep = function(length) {\n  console.log(`${this.name} is sleeping.`);\n  this.energy += length;\n}\nAnimalWithNew.prototype.play = function(length) {\n  console.log(`${this.name} is playing.`);\n  this.energy -= length;\n}\n\nclass AnimalAsClass {\n\n  constructor(name, energy) {\n    this.name = name;\n    this.energy = energy;\n  }\n  // Member functions for AnimalWithNew\n  eat(amount) {\n    console.log(`${this.name} is eating.`);\n    this.energy += amount;\n  }\n  sleep(length) {\n    console.log(`${this.name} is sleeping.`);\n    this.energy += length;\n  }\n  play(length) {\n    console.log(`${this.name} is playing.`);\n    this.energy -= length;\n  }\n}\n\nexport { testObjectCreate, Animal_V1, Animal_V2, Animal_V3, AnimalWithNew, AnimalAsClass }\n"],"file":"classesAndThis.js"}