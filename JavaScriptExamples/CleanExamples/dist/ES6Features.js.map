{"version":3,"sources":["../src/ES6Features.js"],"names":["defaultParametersMultiply","x","y","templateLiterals","first","last","greeting","multiLineStrings","multiLine","scopeTestVar","scopeTestLet","PersonClass","name","address","age","aName","Employee","id","empId","forEachTest","aNumbersArray","result","timesTwo","number","push","forEach","forEachAnonymousTest","mapArray01","anArrayOfNumbers","map","element","filterArray01","filter","objectLiterals","title","author","genre"],"mappings":"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","sourcesContent":["/* ES6Features.js\n * desc: Several examples showing new features released in JavaScript ES6.\n */\n\n /* defaultParametersMultiply\n  * desc: Default parameters can be set in the function signature.\n  *       When calling this if you want the default for the first parameter\n  *       then pass in undefined.  Like this defaultParametersMultiply(undefined, 5)\n  */\nfunction defaultParametersMultiply(x=1, y=1) {\n  return(x*y);\n}\n\n/* templateLiterals\n * desc: Allows you to plug variables directly into strings\n *       Note the use of the back ticks when defining the string ``\n */\nfunction templateLiterals() {\n\n  var first = \"John\";\n  var last = \"Doe\";\n  var greeting = `Hello to ${first} ${last}.  Using embedded variables in this string. \\${first} and \\${last} should be replaced with names in the first sentence.`;\n  return(greeting);\n}\n\n/* multiLineStrings\n * desc: Can have a string spanning multiple lines\n *       Note the use of the back ticks when defining the string ``\n */\nfunction multiLineStrings() {\n\n  var multiLine = `This is line 1 of a multi-line string\n  and line2\n  and line3\n  ...\n  use \\`backquotes\\` to define these\n  ...\n  end`;\n  return(multiLine);\n}\n\n/* scopeTestVar\n * desc: This shows how var is scoped in a function.  It is not ES6 specific, JavaScript always\n *       worked this way.\n */\nfunction scopeTestVar() {\n  // For var all inner declarations don't reallocate the variable.\n  var x = 1;\n  {\n    // This var definition refers back to the origin definiton of x and changes it's value\n    var x = 2;\n  }\n  {\n    // This var definition refers back to the origin definiton of x and changes it's value\n    var x = 3;\n  }\n  // At this point x=3\n  return(x);\n}\n\n/* scopeTestLet\n * desc: This shows how 'let' has different scoping behavior from 'var'\n */\nfunction scopeTestLet() {\n  // For let we expect the variables defined in the inner scopes to reallocate the variable.\n  let x = 1;\n  {\n    // This reallocates the variable and puts 2 in it.  Original x is unaffectd.\n    let x = 2;\n  }\n  {\n    let x = 3;\n  }\n  // At this point only x=1 remains.\n  return(x);\n}\n\nclass PersonClass {\n  // Note there are no member variable here.  They are created in the constructor.\n  constructor(name, address, age) {\n    this.name = name;\n    this.address = address;\n    this.age = age;\n  }\n\n  // Getters and setters, but all member variables are public so these\n  // are not really protecting anything.\n  getName() {\n    // Memeber variables are always accesed using this.\n    return( this.name );\n  }\n\n  getAddress() {\n    return( this.address );\n  }\n\n  getAge() {\n    return( this.age );\n  }\n\n  setName(aName) {\n    this.name = aName;\n  }\n}\n\nclass Employee extends PersonClass {\n\n  constructor(name, address, age, id) {\n    super(name, address, age);\n    this.empId = id;\n  }\n\n  getEmpId() {\n    return(this,empId);\n  }\n}\n\n/* forEachTest\n * desc: Shows how to iterate over and array using forEach calling a function on each element in the array\n */\nfunction forEachTest(aNumbersArray) {\n\n  let result = [];\n  function timesTwo(number) {\n    result.push(2*number);\n  }\n  aNumbersArray.forEach(timesTwo);\n  return(result);\n}\n\n/* forEachAnonymousTest\n * desc: Shows how to iterate over and array using forEach calling a function on each element in the array\n *       This version uses an anonymous function\n */\nfunction forEachAnonymousTest(aNumbersArray) {\n\n  let result = [];\n  aNumbersArray.forEach( (number) => { result.push(2*number) } );\n  return(result);\n}\n\n/* mapArray01\n * desc: A simple example of how to map across an array, perform and operation on each element and return a new array\n */\n function mapArray01(anArrayOfNumbers) {\n   return(anArrayOfNumbers.map( (element) => {\n     return(2*element);\n   }));\n }\n\n /* filterArray01\n  * desc: A simple example of how to filter an array, select elements based on a condition and return a new array\n  */\n  function filterArray01(anArrayOfNumbers) {\n    return(anArrayOfNumbers.filter( (element) => {\n      if(element%2 != 0) {\n        return(element);\n      }\n    }));\n  }\n\n/* objectLiterals\n * desc: Can now return name value pairs where the names are filled in automatically.\n */\n function objectLiterals(title, author, genre) {\n   return({\n     title,\n     author,\n     genre\n   });\n }\n\nexport { defaultParametersMultiply, templateLiterals, multiLineStrings,\n  scopeTestVar, scopeTestLet, PersonClass, Employee, forEachTest, forEachAnonymousTest,\n  mapArray01, filterArray01, objectLiterals }\n"],"file":"ES6Features.js"}