{"version":3,"sources":["../src/Closure.js"],"names":["PersonClosure","pName","_name","getName","console","log","functionIsVisibleOutside","functionNotVisibleOutside","nowICanSeeYou","canYouSeeMe"],"mappings":";;;;;;;AAAA;;;;;;AAOA,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAE5B;AACA,MAAIC,KAAK,GAAGD,KAAZ,CAH4B,CAK5B;AACA;AACA;AACA;AACA;;AACA,OAAKE,OAAL,GAAe,YAAW;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ;AACA,WAAOH,KAAP;AACD,GAHD;AAKA;;;;;;AAIA,OAAKI,wBAAL,GAAgC,YAAW;AACzCF,IAAAA,OAAO,CAACC,GAAR,CAAY,sEAAZ;AACAE,IAAAA,yBAAyB;AACzB,WAAO,iCAAP;AACD,GAJD;AAMA;;;;;AAGA,OAAKC,aAAL,GAAqB,YAAW;AAE5B,WAAOC,WAAW,EAAlB;AACH,GAHD;AAKA;;;;;AAGA,WAASA,WAAT,GAAuB;AAErB,WAAO,YAAP;AACD;AAED;;;;;;AAIA,MAAIF,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAW;AACzCH,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACD,GAFD;AAID","sourcesContent":["/* Closure.js\n * desc: Shows how closures can be implemented in JavaScript\n *       A closure is a function with an internal state that perisists after the function\n *       is called.  This happens in JavaScript if there is another function within the first that\n *       provides access to the inner variables.\n */\n\nfunction PersonClosure(pName) {\n\n  // The _name variable is not accessible from outside the Person function\n  var _name = pName;\n\n  // The getName function provides access to the _name variable.\n  // This function is available outside and can set access the values closed inside.\n  // It is refered to as a Closure.\n  // To say it another way, a closure is a function that has access to the parent scope,\n  // even after the parant function has closed.\n  this.getName = function() {\n    console.log(\"From this.getName, we can access the inner variable _name\")\n    return _name;\n  };\n\n  /* this.functionIsVisibleOutside\n   * desc: Will be visible from outside the Person function and can be called to access\n   *       inner objects closed into the Person function.\n   */\n  this.functionIsVisibleOutside = function() {\n    console.log(\"From functionIsVisibleOutside we can call functionNotVisibleOutside.\");\n    functionNotVisibleOutside();\n    return(\"functionIsVisibleOutside worked\");\n  };\n\n  /* this.nowICanSeeYou\n   * desc: Another example of openning up access to closed items within the Person function\n   */\n  this.nowICanSeeYou = function() {\n\n      return(canYouSeeMe());\n  }\n\n  /* canYouSeeMe\n   * desc: This function in NOT visible outside of the person function.  So NO I can't see you from outside.\n   */\n  function canYouSeeMe() {\n\n    return(\"I see you.\");\n  }\n\n  /* functionNotVisibleOutside\n   * desc: functionNotVisibleOutside is defined as a var within the Person function. It will\n   *       be local to the function Person and NOT visible outside.\n   */\n  var functionNotVisibleOutside = function() {\n    console.log(\"functionNotVisibleOutside was called.\");\n  };\n\n}\n\nexport { PersonClosure }\n"],"file":"Closure.js"}