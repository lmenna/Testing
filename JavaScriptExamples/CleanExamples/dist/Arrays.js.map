{"version":3,"sources":["../src/Arrays.js"],"names":["arrayNewTesting","newAry","Array","ary","console","log","i","length","aSet","Set","arrayWithDups","cleanArray","uniqueCleanArray","anAry","uniqueArray","from","filter","item","undefined"],"mappings":"AAAA;AAEA;;;;;;;;;AAGA,SAASA,eAAT,GAA2B;AAEzB;AACA,MAAIC,MAAM,GAAG,IAAIC,KAAJ,CAAU,EAAV,CAAb,CAHyB,CAIzB;;AACA,MAAIC,GAAG,GAAG,CAAC,EAAD,CAAV;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,MAAvB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,GAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACL,MAAM,CAACM,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjCF,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,CAAvB,EAA0B,IAA1B,EAAgCL,MAAM,CAACK,CAAD,CAAtC;AACD,GAbwB,CAczB;;;AACAH,EAAAA,GAAG,CAAC,CAAD,CAAH,GAAS,EAAT;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,GAApB;;AACA,OAAI,IAAIG,EAAC,GAAC,CAAV,EAAaA,EAAC,GAACH,GAAG,CAACI,MAAnB,EAA2BD,EAAC,EAA5B,EAAgC;AAC9BF,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBC,EAApB,EAAuB,IAAvB,EAA6BH,GAAG,CAACG,EAAD,CAAhC;AACD,GApBwB,CAqBzB;;;AACA,MAAIE,IAAI,GAAG,IAAIC,GAAJ,CAAQN,GAAR,CAAX;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBG,IAArB,EAvByB,CAwBzB;AACA;;AACA,MAAIE,aAAa,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,EAAmB,CAAnB,CAApB;AACAA,EAAAA,aAAa,CAAC,EAAD,CAAb,GAAoB,CAApB;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BK,aAA9B;AACA,MAAIC,UAAU,GAAGC,gBAAgB,CAACF,aAAD,CAAjC;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BM,UAA3B;AACD;AAED;;;;;AAGA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAE/B,MAAI,EAAEA,KAAK,YAAYX,KAAnB,CAAJ,EACE,OAAO,EAAP;AACF,MAAIM,IAAI,GAAG,IAAIC,GAAJ,CAAQI,KAAR,CAAX;AACA,MAAIC,WAAW,GAAGZ,KAAK,CAACa,IAAN,CAAWP,IAAX,CAAlB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BS,WAA5B;AACAA,EAAAA,WAAW,GAAGA,WAAW,CAACE,MAAZ,CAAoB,UAACC,IAAD;AAAA,WAAUA,IAAI,IAAEC,SAAhB;AAAA,GAApB,CAAd;AACA,SAAOJ,WAAP;AACD","sourcesContent":["\"use strict\";\n\n/* arrayNewTesting\n * desc: Explore some strage behaviors associated with JavaScript array creation.\n */\nfunction arrayNewTesting() {\n\n  // The next line will create an array with 10 elements with all of the values empty.\n  let newAry = new Array(10);\n  // The next line will create an array with a single element set to the value 10.\n  let ary = [10];\n  console.log(\"Result from let newAry = new Array(10)\")\n  console.log(\"newAry:\", newAry);\n  console.log(\"Result from let ary = [10]\");\n  console.log(\"ary:\", ary);\n  console.log(\"Do a loop over newAry\");\n  for(let i=0; i<newAry.length; i++) {\n    console.log(\"newAry[\", i, \"]=\", newAry[i]);\n  }\n  // The next line will create a sparse array from ary\n  ary[5] = 50;\n  console.log(\"ary[5] = 50\");\n  console.log(\"ary:\", ary);\n  for(let i=0; i<ary.length; i++) {\n    console.log(\"ary[\", i, \"]=\", ary[i]);\n  }\n  // Try to put a sparse array into a set\n  let aSet = new Set(ary);\n  console.log(\"aSet:\", aSet);\n  // Clean an array of duplicates and undefined values.\n  // Ensure returned array is packed.\n  let arrayWithDups = [1,2,3,2,3,4,5,4,5,4];\n  arrayWithDups[15] = 6;\n  console.log(\"arrayWithDups:\", arrayWithDups);\n  let cleanArray = uniqueCleanArray(arrayWithDups);\n  console.log(\"cleanArray:\", cleanArray);\n}\n\n/* uniqueCleanArray\n * desc: Takes an array and strips out the duplicates and remove undefined values.\n */\nfunction uniqueCleanArray(anAry) {\n\n  if (!(anAry instanceof Array))\n    return [];\n  let aSet = new Set(anAry);\n  let uniqueArray = Array.from(aSet);\n  console.log(\"uniqueArray:\", uniqueArray);\n  uniqueArray = uniqueArray.filter( (item) => item!=undefined);\n  return(uniqueArray);\n}\n\nexport {arrayNewTesting};\n"],"file":"Arrays.js"}