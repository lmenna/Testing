{"version":3,"sources":["../src/sets.js"],"names":["runSetCategories","console","log","categories","Set","add","runSetDelete","aSet","name1","name2","obj","name3","delete","manualIterate","colors","itr","values","c","next","done","value","ecma6Iterate","key","removeDuplicatesFromArray","AnArray","set","Array","from"],"mappings":"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","sourcesContent":["/* Coding examples from the Stackskill JavaScript online course\n * https://stackskills.com/courses/179647/lectures/2700083\n */\n\n//  Set examples\n\nvar runSetCategories = ()  => {\n  console.log(\"var runSetCategories = ()\");\n  var categories = new Set();\n  categories.add('Sports');\n  categories.add('Weather');\n  categories.add('Sports'); // Sets will only store unique values\n\n  console.log(\"categories:\", categories);\n  // > categories: Set { 'Sports', 'Weather' }\n}\n\nvar runSetDelete = () => {\n\n  console.log(\"var runSetDelete = ()\");\n  var aSet = new Set();\n  aSet.add({name1: \"value1\"});\n  aSet.add({name2: \"value2\"});\n  var obj = {name3: \"value3\"};\n  aSet.add(obj);\n  console.log(\"Original:\", aSet);\n  aSet.delete({name3: \"value3\"});\n  console.log(\"After delete using values:\", aSet);\n  aSet.delete(obj);\n  console.log(\"After delete using object:\", aSet);\n}\n\nvar manualIterate = () => {\n\n  console.log(\"var manualIterate = ()\");\n  var colors = new Set();\n  colors.add(\"red\");\n  colors.add(\"green\");\n  colors.add(\"blue\");\n  var itr = colors.values();\n  for(var c = itr.next(); !c.done; c = itr.next()) {\n    console.log(c.value);\n  }\n}\n\nvar ecma6Iterate = () => {\n\n  console.log(\"var ecma6Iterate = ()\");\n  var colors = new Set();\n  colors.add(\"red\");\n  colors.add(\"green\");\n  colors.add(\"blue\");\n  for (let key of colors.values()) { // insertion order\n    console.log(key);\n  }\n}\n\n/* removeDuplicatesFromArray\n * desc: Uses a set to remove duplicate items from an array\n * param: Array to remove duplicates from.\n * return: An array matching the input but with duplicates removed.\n */\nvar removeDuplicatesFromArray = (AnArray) => {\n  let set = new Set(AnArray);\n  return(Array.from(set));\n}\n\nexport {runSetCategories, runSetDelete, manualIterate, ecma6Iterate, removeDuplicatesFromArray};\n"],"file":"sets.js"}